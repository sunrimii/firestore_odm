import 'package:fake_cloud_firestore/fake_cloud_firestore.dart';
import 'package:firestore_odm/firestore_odm.dart';
import 'package:flutter_example/models/profile.dart';
import 'package:flutter_example/models/user.dart';
import 'package:flutter_example/test_schema.dart';
import 'package:flutter_test/flutter_test.dart';

void main() {
  group('🆔 Auto-Generated Document ID Tests', () {
    late FakeFirebaseFirestore fakeFirestore;
    late FirestoreODM<TestSchema> odm;

    setUp(() {
      fakeFirestore = FakeFirebaseFirestore();
      odm = FirestoreODM(testSchema, firestore: fakeFirestore);
    });

    group('📋 Auto-Generated ID Constant', () {
      test('should provide auto-generated ID constant', () {
        expect(FirestoreODM.autoGeneratedId, isA<String>());
        expect(FirestoreODM.autoGeneratedId, isNotEmpty);
        expect(FirestoreODM.autoGeneratedId, equals('__FIRESTORE_ODM_AUTO_GENERATED_ID__'));
      });

      test('should insert document with auto-generated ID constant', () async {
        final user = User(
          id: FirestoreODM.autoGeneratedId,
          name: 'Auto Generated User',
          email: 'auto@example.com',
          age: 25,
          profile: const Profile(
            bio: 'User with auto-generated ID',
            avatar: 'auto.jpg',
            socialLinks: {},
            interests: ['auto-id'],
            followers: 100,
          ),
          rating: 4,
          isActive: true,
          createdAt: DateTime.now(),
        );

        // Insert with auto-generated ID
        await odm.users.insert(user);

        // Query to find the user since we don't know the generated ID
        final users = await odm.users
            .where(($) => $.email(isEqualTo: 'auto@example.com'))
            .get();

        expect(users.length, equals(1));
        final retrievedUser = users.first;
        expect(retrievedUser.name, equals('Auto Generated User'));
        expect(retrievedUser.id, isNotEmpty);
        expect(retrievedUser.id, isNot(equals(FirestoreODM.autoGeneratedId)));
      });
    });


    group('🔄 Upsert Operations', () {
      test('should reject auto-generated ID for upsert operations', () async {
        final user = User(
          id: FirestoreODM.autoGeneratedId,
          name: 'Auto Upsert User',
          email: 'autoupsert@example.com',
          age: 28,
          profile: const Profile(
            bio: 'User with auto-generated ID via upsert',
            avatar: 'autoupsert.jpg',
            socialLinks: {},
            interests: ['auto-upsert'],
            followers: 200,
          ),
          rating: 4.5,
          isActive: true,
          createdAt: DateTime.now(),
        );

        // Upsert with auto-generated ID should throw an error
        expect(
          () => odm.users.upsert(user),
          throwsA(isA<ArgumentError>().having(
            (e) => e.message,
            'message',
            contains('Auto-generated IDs cannot be used with upsert operations'),
          )),
        );
      });

      test('should work with specific ID for upsert operations', () async {
        const specificId = 'upsert-test-id';
        
        // First upsert (create)
        await odm.users.upsert(User(
          id: specificId,
          name: 'Upsert User',
          email: 'upsert@example.com',
          age: 28,
          profile: const Profile(
            bio: 'Upserted user',
            avatar: 'upsert.jpg',
            socialLinks: {},
            interests: ['upsert'],
            followers: 100,
          ),
          rating: 4.2,
          isActive: true,
          createdAt: DateTime.now(),
        ));

        // Second upsert (update)
        await odm.users.upsert(User(
          id: specificId,
          name: 'Updated Upsert User',
          email: 'upsert@example.com',
          age: 29,
          profile: const Profile(
            bio: 'Updated upserted user',
            avatar: 'upsert.jpg',
            socialLinks: {},
            interests: ['upsert', 'update'],
            followers: 150,
          ),
          rating: 4.5,
          isActive: true,
          isPremium: true,
          createdAt: DateTime.now(),
        ));

        // Verify the document was updated
        final user = await odm.users(specificId).get();
        expect(user, isNotNull);
        expect(user!.name, equals('Updated Upsert User'));
        expect(user.age, equals(29));
        expect(user.isPremium, isTrue);
      });

    });

    group('🔄 Update Operations', () {
      test('should reject auto-generated ID for update operations', () async {
        final user = User(
          id: FirestoreODM.autoGeneratedId,
          name: 'Auto Update User',
          email: 'autoupdate@example.com',
          age: 30,
          profile: const Profile(
            bio: 'User with auto-generated ID via update',
            avatar: 'autoupdate.jpg',
            socialLinks: {},
            interests: ['auto-update'],
            followers: 250,
          ),
          rating: 4.8,
          isActive: true,
          isPremium: true,
          createdAt: DateTime.now(),
        );

        // Update with auto-generated ID should throw an error
        expect(
          () => odm.users.update(user),
          throwsA(isA<ArgumentError>().having(
            (e) => e.message,
            'message',
            contains('Auto-generated IDs cannot be used with update operations'),
          )),
        );
      });

      test('should work with specific ID for update operations', () async {
        const specificId = 'update-test-id';
        
        // First create a document
        await odm.users.insert(User(
          id: specificId,
          name: 'Original User',
          email: 'original@example.com',
          age: 25,
          profile: const Profile(
            bio: 'Original user',
            avatar: 'original.jpg',
            socialLinks: {},
            interests: ['original'],
            followers: 50,
          ),
          rating: 3,
          isActive: true,
          createdAt: DateTime.now(),
        ));

        // Then update it
        await odm.users.update(User(
          id: specificId,
          name: 'Updated User',
          email: 'updated@example.com',
          age: 26,
          profile: const Profile(
            bio: 'Updated user',
            avatar: 'updated.jpg',
            socialLinks: {},
            interests: ['updated'],
            followers: 100,
          ),
          rating: 4,
          isActive: true,
          isPremium: true,
          createdAt: DateTime.now(),
        ));

        // Verify the document was updated
        final user = await odm.users(specificId).get();
        expect(user, isNotNull);
        expect(user!.name, equals('Updated User'));
        expect(user.email, equals('updated@example.com'));
        expect(user.age, equals(26));
        expect(user.isPremium, isTrue);
      });
    });

    group('📦 Batch Operations', () {
      test('should support auto-generated IDs in batch operations', () async {
        await odm.runBatch((batch) {
          // Using auto-generated ID constant
          batch.users.insert(User(
            id: FirestoreODM.autoGeneratedId,
            name: 'Batch Auto User 1',
            email: 'batchauto1@example.com',
            age: 25,
            profile: const Profile(
              bio: 'Batch user with auto ID',
              avatar: 'batchauto1.jpg',
              socialLinks: {},
              interests: ['batch', 'auto'],
              followers: 100,
            ),
            rating: 4,
            isActive: true,
            createdAt: DateTime.now(),
          ));

          // Using auto-generated ID constant again
          batch.users.insert(User(
            id: FirestoreODM.autoGeneratedId,
            name: 'Batch Auto User 2',
            email: 'batchauto2@example.com',
            age: 27,
            profile: const Profile(
              bio: 'Batch user with auto-generated ID',
              avatar: 'batchauto2.jpg',
              socialLinks: {},
              interests: ['batch', 'auto'],
              followers: 120,
            ),
            rating: 3.8,
            isActive: true,
            isPremium: true,
            createdAt: DateTime.now(),
          ));

          // Mix with custom ID
          batch.users.insert(User(
            id: 'custom-batch-user',
            name: 'Custom Batch User',
            email: 'custombatch@example.com',
            age: 30,
            profile: const Profile(
              bio: 'Batch user with custom ID',
              avatar: 'custombatch.jpg',
              socialLinks: {},
              interests: ['batch', 'custom'],
              followers: 150,
            ),
            rating: 4.2,
            isActive: true,
            createdAt: DateTime.now(),
          ));
        });

        // Verify all users were created
        final allUsers = await odm.users.get();
        expect(allUsers.length, equals(3));

        // Find auto-generated users
        final autoUser1 = allUsers.firstWhere(
          (u) => u.email == 'batchauto1@example.com',
        );
        final autoUser2 = allUsers.firstWhere(
          (u) => u.email == 'batchauto2@example.com',
        );
        final customUser = allUsers.firstWhere(
          (u) => u.email == 'custombatch@example.com',
        );

        // Verify auto-generated IDs
        expect(autoUser1.id, isNotEmpty);
        expect(autoUser1.id, isNot(equals(FirestoreODM.autoGeneratedId)));
        expect(autoUser2.id, isNotEmpty);
        expect(autoUser2.id, isNot(equals(FirestoreODM.autoGeneratedId)));
        expect(customUser.id, equals('custom-batch-user'));

        // Verify all IDs are unique
        final ids = allUsers.map((u) => u.id).toSet();
        expect(ids.length, equals(3));
      });
    });

    group('🔍 Mixed Operations', () {
      test('should handle mix of auto-generated and custom IDs', () async {
        final users = [
          User(
            id: 'custom-1',
            name: 'Custom User 1',
            email: 'custom1@example.com',
            age: 25,
            profile: const Profile(
              bio: 'Custom ID user',
              avatar: 'custom1.jpg',
              socialLinks: {},
              interests: ['custom'],
              followers: 100,
            ),
            rating: 4,
            isActive: true,
            createdAt: DateTime.now(),
          ),
          User(
            id: FirestoreODM.autoGeneratedId,
            name: 'Auto User 1',
            email: 'auto1@example.com',
            age: 28,
            profile: const Profile(
              bio: 'Auto-generated ID user',
              avatar: 'auto1.jpg',
              socialLinks: {},
              interests: ['auto'],
              followers: 120,
            ),
            rating: 3.8,
            isActive: true,
            isPremium: true,
            createdAt: DateTime.now(),
          ),
          User(
            id: FirestoreODM.autoGeneratedId,
            name: 'Auto User 2',
            email: 'auto2@example.com',
            age: 30,
            profile: const Profile(
              bio: 'Another auto-generated ID user',
              avatar: 'auto2.jpg',
              socialLinks: {},
              interests: ['auto'],
              followers: 150,
            ),
            rating: 4.5,
            isActive: true,
            createdAt: DateTime.now(),
          ),
        ];

        // Insert all users
        for (final user in users) {
          await odm.users.insert(user);
        }

        // Verify all users exist
        final allUsers = await odm.users.get();
        expect(allUsers.length, equals(3));

        // Find users by email
        final customUser = allUsers.firstWhere(
          (u) => u.email == 'custom1@example.com',
        );
        final autoUser1 = allUsers.firstWhere(
          (u) => u.email == 'auto1@example.com',
        );
        final autoUser2 = allUsers.firstWhere(
          (u) => u.email == 'auto2@example.com',
        );

        // Verify IDs
        expect(customUser.id, equals('custom-1'));
        expect(autoUser1.id, isNotEmpty);
        expect(autoUser1.id, isNot(equals(FirestoreODM.autoGeneratedId)));
        expect(autoUser2.id, isNotEmpty);
        expect(autoUser2.id, isNot(equals(FirestoreODM.autoGeneratedId)));

        // Verify all IDs are unique
        final ids = allUsers.map((u) => u.id).toSet();
        expect(ids.length, equals(3));
      });
    });
  });
}