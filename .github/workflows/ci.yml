name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  # Job 1: Code Quality & Testing
  quality-check:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: 📚 Git Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🎯 Setup Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: stable
          channel: stable
          cache: true

      - name: 📦 Install Melos
        run: dart pub global activate melos

      - name: 🔧 Bootstrap Workspace
        run: melos bootstrap

      - name: 🔍 Verify Using Melos
        run: melos --version

      - name: 📊 Dependency Overview
        run: melos list --long

      - name: ✨ Check Code Formatting
        run: melos run format:check

      - name: 🕵️ Analyze Code
        run: melos run analyze

      - name: 🧪 Run Unit Tests
        run: melos run test:unit

      - name: 🧪 Run Integration Tests
        run: melos run test:integration

      - name: 📋 Validate Publish
        run: melos run publish:dry-run

  # Job 2: Version Check (only on main branch)
  version-check:
    name: Version Check
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: quality-check
    
    steps:
      - name: 📚 Git Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🎯 Setup Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      - name: 📦 Install Melos
        run: dart pub global activate melos

      - name: 🔧 Bootstrap Workspace
        run: melos bootstrap

      - name: 🔍 Check Version Status
        run: melos run version:check

  # Job 3: Auto Publish (only on release)
  publish:
    name: Publish to pub.dev
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: quality-check
    
    steps:
      - name: 📚 Git Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🎯 Setup Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: stable
          channel: stable
          cache: true

      - name: 📦 Install Melos
        run: dart pub global activate melos

      - name: 🔧 Bootstrap Workspace
        run: melos bootstrap

      - name: 🔍 Final Quality Check
        run: melos run check

      - name: 🚀 Publish to pub.dev
        env:
          PUB_TOKEN: ${{ secrets.PUB_TOKEN }}
        run: |
          echo "Setting up pub credentials..."
          mkdir -p ~/.pub-cache
          echo "$PUB_TOKEN" > ~/.pub-cache/credentials.json
          
          echo "Publishing packages..."
          melos run publish

      - name: 📝 Create Release Notes
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');
            
            // Get package versions
            const packages = JSON.parse(execSync('melos list --json').toString());
            const publishedPackages = packages.filter(pkg => !pkg.private);
            
            let releaseNotes = '## 📦 Published Packages\n\n';
            for (const pkg of publishedPackages) {
              releaseNotes += `- **${pkg.name}** v${pkg.version}\n`;
            }
            
            releaseNotes += '\n## 🔗 Links\n\n';
            for (const pkg of publishedPackages) {
              releaseNotes += `- [${pkg.name} on pub.dev](https://pub.dev/packages/${pkg.name})\n`;
            }
            
            // Update release description
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id,
              body: context.payload.release.body + '\n\n' + releaseNotes
            });

  # Job 4: Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
      - name: 📚 Git Checkout
        uses: actions/checkout@v4

      - name: 🎯 Setup Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      - name: 📦 Install Melos
        run: dart pub global activate melos

      - name: 🔧 Bootstrap Workspace
        run: melos bootstrap

      - name: 🔒 Run Security Audit
        run: |
          echo "Checking for outdated dependencies..."
          melos run deps:outdated || true
          
          echo "Running security audit..."
          # Add any security scanning tools here
          echo "Security audit completed"

  # Job 5: Documentation Check
  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📚 Git Checkout
        uses: actions/checkout@v4

      - name: 🎯 Setup Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      - name: 📦 Install Melos
        run: dart pub global activate melos

      - name: 🔧 Bootstrap Workspace
        run: melos bootstrap

      - name: 📖 Generate Documentation
        run: |
          echo "Generating documentation..."
          dart doc --output docs/ packages/firestore_odm/
          dart doc --output docs/ packages/firestore_odm_annotation/
          dart doc --output docs/ packages/firestore_odm_builder/
          
      - name: 📋 Check Documentation Coverage
        run: |
          echo "Checking documentation coverage..."
          # Add documentation coverage checks here
          echo "Documentation check completed"