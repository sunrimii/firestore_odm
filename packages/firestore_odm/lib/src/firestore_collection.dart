import 'package:cloud_firestore/cloud_firestore.dart' as firestore;
import 'package:firestore_odm/firestore_odm.dart';
import 'package:firestore_odm/src/interfaces/aggregatable.dart';
import 'package:firestore_odm/src/interfaces/deletable.dart';
import 'package:firestore_odm/src/interfaces/filterable.dart';
import 'package:firestore_odm/src/interfaces/gettable.dart';
import 'package:firestore_odm/src/interfaces/insertable.dart';
import 'package:firestore_odm/src/interfaces/limitable.dart';
import 'package:firestore_odm/src/interfaces/modifiable.dart';
import 'package:firestore_odm/src/interfaces/orderable.dart';
import 'package:firestore_odm/src/interfaces/patchable.dart';
import 'package:firestore_odm/src/interfaces/streamable.dart';
import 'package:firestore_odm/src/interfaces/updatable.dart';
import 'package:firestore_odm/src/interfaces/upsertable.dart';

/// A wrapper around Firestore CollectionReference with type safety and caching
class FirestoreCollection<
  S extends FirestoreSchema,
  T,
  Path extends Record,
  P extends PatchBuilder<T>,
  F extends FilterBuilderRoot,
  OB extends OrderByFieldNode,
  AB extends AggregateBuilderRoot
>
    implements
        Gettable<List<T>>,
        Streamable<List<T>>,
        Insertable<T>,
        Updatable<T>,
        Upsertable<T>,
        Orderable<T>,
        Filterable<T>,
        Patchable<T>,
        Modifiable<T>,
        Aggregatable<T>,
        Limitable,
        Deletable {
  /// The underlying Firestore collection reference
  final firestore.CollectionReference<Map<String, dynamic>> query;

  /// Model converter for data transformation
  final FirestoreConverter<T, Map<String, dynamic>> converter;

  /// Document ID field name (detected from model analysis)
  final String documentIdField;

  final P _patchBuilder;

  final F _filterBuilder;

  final OB Function(OrderByContext context) _orderByBuilderFunc;

  final AB Function(AggregateContext context) _aggregateBuilderFunc;

  /// Creates a new FirestoreCollection instance
  const FirestoreCollection({
    required this.query,
    required this.converter,
    required this.documentIdField,
    required P patchBuilder,
    required F filterBuilder,
    required OB Function(OrderByContext context) orderByBuilderFunc,
    required AB Function(AggregateContext context) aggregateBuilderFunc,
  }) : _patchBuilder = patchBuilder,
       _filterBuilder = filterBuilder,
       _orderByBuilderFunc = orderByBuilderFunc,
       _aggregateBuilderFunc = aggregateBuilderFunc;

  /// Gets a document reference with the specified ID
  /// Documents are cached to ensure consistency
  /// Usage: users('id')
  FirestoreDocument<S, T, Path, P> call(String id) => doc(id);

  FirestoreDocument<S, T, Path, P> doc(String id) =>
      FirestoreDocument<S, T, Path, P>(
        ref: query.doc(id),
        converter: converter,
        documentIdField: documentIdField,
        patchBuilder: _patchBuilder,
      );

  /// Upsert a document using the id field as document ID
  Future<void> upsert(T value) =>
      CollectionHandler.upsert(query, value, converter.toJson, documentIdField);

  /// Insert a new document using the id field as document ID
  /// Use FirestoreODM.autoGeneratedId for server-generated unique IDs
  /// Fails if document already exists (when ID is specified)
  Future<void> insert(T value) =>
      CollectionHandler.insert(query, value, converter.toJson, documentIdField);

  /// Update an existing document using the id field as document ID
  /// Fails if document doesn't exist
  @override
  Future<void> update(T value) =>
      CollectionHandler.update(query, value, converter.toJson, documentIdField);

  @override
  Future<List<T>> get() =>
      CollectionHandler.get<T>(query, converter.fromJson, documentIdField);

  @override
  Stream<List<T>> get stream =>
      QueryHandler.stream(query, converter.fromJson, documentIdField);

  @override
  OrderedQuery<S, T, O, P, F, OB, AB> orderBy<O extends Record>(
    O Function(OB selector) orderByFunc,
  ) {
    final config = QueryOrderbyHandler.buildOrderBy(
      orderByFunc: orderByFunc,
      orderByBuilderFunc: _orderByBuilderFunc,
      documentIdFieldName: documentIdField,
    );
    final newQuery = QueryOrderbyHandler.applyOrderBy(query, config);
    return OrderedQuery(
      query: newQuery,
      converter: converter,
      documentIdField: documentIdField,
      orderByConfig: config,
      patchBuilder: _patchBuilder,
      filterBuilder: _filterBuilder,
      orderByBuilderFunc: _orderByBuilderFunc,
      aggregateBuilderFunc: _aggregateBuilderFunc,
    );
  }

  Query<S, T, P, F, OB, AB> _newQuery(
    firestore.Query<Map<String, dynamic>> newQuery,
  ) {
    return Query<S, T, P, F, OB, AB>(
      query: newQuery,
      converter: converter,
      documentIdField: documentIdField,
      patchBuilder: _patchBuilder,
      filterBuilder: _filterBuilder,
      orderByBuilderFunc: _orderByBuilderFunc,
      aggregateBuilderFunc: _aggregateBuilderFunc,
    );
  }

  @override
  Query<S, T, P, F, OB, AB> where(FirestoreFilter Function(F selector) filterFunc) {
    final filter = filterFunc(_filterBuilder);
    final newQuery = QueryFilterHandler.applyFilter(query, filter);
    return _newQuery(newQuery);
  }

  @override
  Query<S, T, P, F, OB, AB> limit(int limit) {
    final newQuery = QueryLimitHandler.applyLimit(query, limit);
    return _newQuery(newQuery);
  }

  @override
  Query<S, T, P, F, OB, AB> limitToLast(int limit) {
    final newQuery = QueryLimitHandler.applyLimitToLast(query, limit);
    return _newQuery(newQuery);
  }

  @override
  Future<void> patch(List<UpdateOperation> Function(P patches) patches) {
    final operations = patches(_patchBuilder);
    return QueryHandler.patch(query, operations);
  }

  @override
  AggregateQuery<T, R, AB> aggregate<R extends Record>(
    R Function(AB selector) builder,
  ) {
    final config = QueryAggregatableHandler.buildAggregate(
      builder,
      _aggregateBuilderFunc,
    );
    final newQuery = QueryAggregatableHandler.applyAggregate(
      query,
      config.operations,
    );
    return AggregateQuery(
      newQuery,
      converter.toJson,
      converter.fromJson,
      documentIdField,
      config,
      _aggregateBuilderFunc,
    );
  }

  @override
  AggregateCountQuery count() {
    final newQuery = QueryAggregatableHandler.applyCount(query);
    return AggregateCountQuery(newQuery);
  }

  @override
  Future<void> modify(ModifierBuilder<T> modifier, {bool atomic = true}) =>
      QueryHandler.modify(
        query,
        documentIdField,
        converter.toJson,
        converter.fromJson,
        modifier,
        atomic: atomic,
      );

  @override
  Future<void> delete() => QueryHandler.delete(query);
}
